#!/bin/sh

# dirname and basename 
requiresarg()
{
	if [ -z "$1"  ]
	then	printf -- "%s requires an argument\n" "$0"
		exit 1
	fi
}

basenamesh()
{ 
	requiresarg $@
	BASENAME="$1"
	HOLD=""
	while [ "$BASENAME" != "$HOLD" ]
	do	HOLD="$BASENAME"
		BASENAME="${BASENAME%/}"
	done
	BASENAME="${BASENAME##*/}"
	printf -- "%s\n" "${BASENAME}"
} 

dirnamesh()
{ 
	requiresarg $@
	DIRNAME="$1"
	HOLD=""
	while [ "$DIRNAME" != "$HOLD" ]
	do	HOLD="$DIRNAME"
		DIRNAME="${DIRNAME%/}"
	done 
	DIRNAME="${DIRNAME%/*}" 
	printf -- "%s\n" "${DIRNAME}" 
} 

# ldd wrapper
lddwrapsh()
{
	for i in $(ldd $1)
	do case "$i" in
		*/* ) 	mkdir -p ${2}/$(dirnamesh $i)
			cp $i ${2}/$(dirnamesh $i) 
			;;
		esac
	done
	
	mkdir -p ${2}/$(dirnamesh $1)
	cp $1 ${2}/$(dirnamesh $1)
}

# du wrapper
duprint()
{ 
	if [ "$#" -gt 1 ]
	then	printf "%s" $( eval printf '$'$(( $# - 1 )))
	fi
}

duwrap()
{
	duprint $(du -s $@ 2>/dev/null)
}

# text searching and glob parsing
compare()
{
	# depends on set -f
	case "$2" in
		${1})	printf '%s%s%s\n' "${f:+$f:}" "${c:+$c:}" "${2}" ;; 
	esac
}

stdin()
{
	while IFS='' read -r i
	do	compare "$p" "$i" 
		[ -n "$c" ] && c=$((c + 1)) # count line number
	done
}

concatenate()
{
	[ -z "$1" ] && stdin
	for j in $@
	do	[ -n "$f" ] && f="$j" # reset file name
		[ -n "$c" ] && c=1 # reset line count
		stdin < "$j"
	done 
} 

grop()
{ 
	# disable path name expansion
	set -f
	[ -n "$1" ] || grophelp
	for i in $@
	do
		p="$1" 
		shift
		case "$p" in 
			-h)	grophelp ;;
			-H) 	p="$1"
				f="$2"
				continue 
				;;
			-o)	unset f c
				p="$1"
				shift
				for i in $(concatenate $@) 
				do	compare "$p" "$i" 
				done 
				break 
				;;
			-n)	c="1"
				continue 
				;; 
			*)	concatenate "$@" 
				break
				;; 
		esac 
     	done 
} 

grophelp()
{
	printf -- "%s\n" "V. 0.2 \`grop', a \"Glob Grabbing Parser\" "
	printf -- "%s\n" "grop.sh [OPTION] [PATTERN] [FILE(S)]" 
	printf -- "%s\n" "  -H     print file name of match" 
	printf -- "%s\n" "  -o     print word match only (use alone)" 
	printf -- "%s\n" "  -n     print line number of match"
	exit 1
}

# networking
hex_to_int()
{
	printf  "%d\n" "0x${1}"
}

hex_to_ip()
{
	CACHE="$1"
	NUMBE="$(( ${#1} / 2 )) " 
	COUNT="0"
	REMOV=""
	while [ "$COUNT" -lt "$NUMBE" ]
	do 
		REMOV=${CACHE%*??} 
		printf  "%d"  "0x${CACHE##$REMOV}"
		COUNT=$(( COUNT + 1 ))
		[ "$COUNT" -eq "$NUMBE" ] && break
		printf  "." 
		CACHE="$REMOV" 
	done
	printf  "\n"
	
} 

# lexicographic
int_to_lex_main()
{

	LENGTH="${#1}"
	TRICOUNT="1"
	HOLD="$1"
	TRIPLE=""
	REMAINDER=$((LENGTH % 3 ))
	COUNT="0"
	PLACE="${#1}"

	# handle any partial sets of three 
	while [ "$COUNT" -lt "$REMAINDER" ]
	do      TRIPLE="${TRIPLE}$(printf "%1c\n" "$HOLD" )"
       	 	HOLD="${HOLD#[0-9]}"
        	COUNT=$(( COUNT + 1 ))
	done

	int_to_lex "$TRIPLE"

	COUNT="0"
	TRIPLE=""
	PLACE="$LENGTH"

	while [ "$COUNT" -lt "$LENGTH" ]
	do      for j in "$HOLD"
	        do      TRIPLE="${TRIPLE}$(printf "%1c\n" "$j" )"
	                HOLD="${j#[0-9]}"
	                [ "$TRICOUNT" -eq 3 ] && int_to_lex "$TRIPLE"
	                [ "$TRICOUNT" -eq 3 ] && TRIPLE=""
	                COUNT=$(( COUNT + 1 ))
	                TRICOUNT=$(( TRICOUNT + 1 ))
	                [ "$TRICOUNT" -eq 4 ] && TRICOUNT="1"
	                PLACE=$(( PLACE - 1 ))
	        done
	done
	printf "\n"
}

int_to_lex()
{

        HOLDT="$1"
        TOKLEN="${#1}"
        TOKCNT="0"
        TOKENS=""

        A="-1"
        B="-1"
        C="-1"

        while [ "$TOKCNT" -lt "$TOKLEN" ]
        do      TOKENS="$(printf "%1c\n" "$HOLDT" )"
                HOLDT="${HOLDT#[0-9]}"
                [ "$TOKCNT" -eq "0" ] && A="$TOKENS"
                [ "$TOKCNT" -eq "1" ] && B="$TOKENS"
                [ "$TOKCNT" -eq "2" ] && C="$TOKENS"
                TOKCNT=$(( TOKCNT + 1 ))
        done

	[ "$TOKLEN" -eq 1 ] && { C="$A"; A="-1"; B="-1" ;}
	[ "$TOKLEN" -eq 2 ] && { C="$B"; B="$A"; A="-1" ;} 

        # hundreds
        [ "$A" -eq 1 ] && printf "one "
        [ "$A" -eq 2 ] && printf "two "
        [ "$A" -eq 3 ] && printf "three "
        [ "$A" -eq 4 ] && printf "four "
        [ "$A" -eq 5 ] && printf "five "
        [ "$A" -eq 6 ] && printf "six "
        [ "$A" -eq 7 ] && printf "seven "
        [ "$A" -eq 8 ] && printf "eight "
        [ "$A" -eq 9 ] && printf "nine "

        # voice rule for hundreds count 
        [ "$TOKLEN" -eq 3 -a "$A" -gt 0 ] && printf "hundred "

        # all of the "teens" have a special rule
        [ "$B" -eq 1 -a "$C" -eq 0 ] && printf "ten "
        [ "$B" -eq 1 -a "$C" -eq 1 ] && printf "eleven "
        [ "$B" -eq 1 -a "$C" -eq 2 ] && printf "twelve "
        [ "$B" -eq 1 -a "$C" -eq 3 ] && printf "thirteen "
        [ "$B" -eq 1 -a "$C" -eq 4 ] && printf "fourteen "
        [ "$B" -eq 1 -a "$C" -eq 5 ] && printf "fifteen "
        [ "$B" -eq 1 -a "$C" -eq 6 ] && printf "sixteen "
        [ "$B" -eq 1 -a "$C" -eq 7 ] && printf "seventeen "
        [ "$B" -eq 1 -a "$C" -eq 8 ] && printf "eighteen "
        [ "$B" -eq 1 -a "$C" -eq 9 ] && printf "nineteen "

        # all "*ties" are "tens" places 
        [ "$B" -eq 2 ] && printf "twenty "
        [ "$B" -eq 3 ] && printf "thirty "
        [ "$B" -eq 4 ] && printf "fourty "
        [ "$B" -eq 5 ] && printf "fifty "
        [ "$B" -eq 6 ] && printf "sixty "
        [ "$B" -eq 7 ] && printf "seventy "
        [ "$B" -eq 8 ] && printf "eighty "
        [ "$B" -eq 9 ] && printf "ninety "

	# Final columns main rule is to not break the "teens" 
        [ "$C" -eq 1 -a "$B" -ne "1" ] && printf "one "
        [ "$C" -eq 2 -a "$B" -ne "1" ] && printf "two "
        [ "$C" -eq 3 -a "$B" -ne "1" ] && printf "three "
        [ "$C" -eq 4 -a "$B" -ne "1" ] && printf "four "
        [ "$C" -eq 5 -a "$B" -ne "1" ] && printf "five "
        [ "$C" -eq 6 -a "$B" -ne "1" ] && printf "six "
        [ "$C" -eq 7 -a "$B" -ne "1" ] && printf "seven "
        [ "$C" -eq 8 -a "$B" -ne "1" ] && printf "eight "
        [ "$C" -eq 9 -a "$B" -ne "1" ] && printf "nine "

        #Change any unused place values to zero
        D="0"
        [ "$A" -lt "0" ] && A=0
        [ "$B" -lt "0" ] && B=0
        [ "$C" -lt "0" ] && C=0
        D=$(( $A + $B + $C ))

        [ "$PLACE" -lt 6 -a "$PLACE" -gt 3 -a "$D" -gt "-1" ] && printf "thousand "
        [ "$PLACE" -lt 9 -a "$PLACE" -gt 6 -a "$D" -gt "-1" ] && printf "million "
        [ "$PLACE" -lt 12 -a "$PLACE" -gt 9 -a "$D" -gt "-1" ] && printf "billion "
        [ "$PLACE" -lt 15 -a "$PLACE" -gt 12 -a "$D" -gt "-1" ] && printf "trillion "
        [ "$PLACE" -lt 18 -a "$PLACE" -gt 15 -a "$D" -gt "-1" ] && printf "quadrillion "
        [ "$PLACE" -lt 21 -a "$PLACE" -gt 18 -a "$D" -gt "-1" ] && printf "quintillion "
        [ "$PLACE" -lt 24 -a "$PLACE" -gt 21 -a "$D" -gt "-1" ] && printf "sextillion "
        [ "$PLACE" -lt 27 -a "$PLACE" -gt 24 -a "$D" -gt "-1" ] && printf "septillion "
        A="-1"
        B="-1"
        C="-1"

}

# math
power()
{
        COUNT="1"
        HOLD="$1"
        LENGT="$2"
        if [ "$LENGT" -eq 0 ]
        then    printf "1"
        else    while [ "$COUNT" -lt "$LENGT" ]
                do
                        HOLD=$(( HOLD * $1  ))
                        COUNT=$((COUNT + 1 ))
                done
                printf "$HOLD"
        fi
}

# sorting and array implementations
insertion_sort()
{
	C="0" 
	N="$#"

	for i in $@
	do 	eval ARRAY_"$C"="$i" 
		C=$(( $C + 1 ))
	done 

	C="1" 

	while [ "$C" -lt "$N" ]
	do 	D="$C" 
		while [ "$D" -gt "0" -a \
		"$( eval printf '$'ARRAY_$D )" -lt \
		"$( eval printf '$'ARRAY_$(( $D - 1 )) )" ]
		do 
			HOLD="$( eval printf '$'ARRAY_$D )" 
			eval ARRAY_"$D"="$( eval printf '$'ARRAY_$(( $D - 1 )) )" 
			eval ARRAY_$(( $D - 1 ))="$HOLD"
			D=$(( $D - 1 ))
		done 
		C=$(( $C + 1 ))
	done 
  
	C="0" 

	while [ "$C" -lt "$N" ]
	do 	printf "%s\n"  "$( eval printf '$'ARRAY_$C )" 
		C=$(( C + 1 )) 
	done

}

# file listing and stating
shellstat()
{
	BOOL="0"
	S=""
	[ -e "$1" ] || return
	[ -k "$1" -a "$BOOL" = "0" ] && S="S" && BOOL="1"
	[ -h "$1" -a "$BOOL" = "0" ] && S="l" && BOOL="1"
	[ -b "$1" -a "$BOOL" = "0" ] && S="b" && BOOL="1"
	[ -c "$1" -a "$BOOL" = "0" ] && S="c" && BOOL="1"
	[ -d "$1" -a "$BOOL" = "0" ] && S="d" && BOOL="1"
	[ "$BOOL" = "0" ] && S="-"
	S="${S}..."
	[ -r "$1" ] && S="${S}r" || S="${S}-"
	[ -w "$1" ] && S="${S}w" || S="${S}-"
	[ -x "$1" ] && S="${S}x" || S="${S}-"
	S="${S}..."
	[ -G "$1" ] && S=" ${S} $USER :" || S="${S} ...... :"
	[ -O "$1" ] && S=" ${S} $USER " || S="${S} ......"
	printf "%s  %s\n" "${S}" "${1}"
} 

lssh()
{
	if	command -v tput >/dev/null 2>&1
	then	LINES="$(tput lines)"
		ROWS="$(tput cols)"
	else	LINES="24"
		ROWS="80"
	fi


	# Argument parsing
	LONGLIST="0"
	ARGS=""
	DEEP="0"
	HIDDEN="0"

	for i in $@
	do	case "$i" in
		-l)	LONGLIST="1"
			shift
			;;
		-R)	DEEP="1"
			shift
			;;
		-a)	HIDDEN="1"
			shift
			;;
		*)	ARGS="${ARGS} ${i}"
			;;
		esac
	done


	# Default to printing the current working directory
	WORKD="."
	if [ "$#" -gt "0" ]
	then	WORKD="$ARGS"
	fi

	# Determine depth and whether to print hidden files
	HSTARS=""
	STARS="${WORKD}/*"
	if [ "$HIDDEN" = "0" ]
	then	STARS="${WORKD}/*"
	else	HSTARS="${WORKD}/.*"
	fi

	if [ "$DEEP" = "1" ]
	then	if [ "$HIDDEN" = "0" ]
		then	STARS="${WORKD}/* ${WORKD}/*/* ${WORKD}/*/*/* ${WORKD}/*/*/*/* "
		else	HSTARS="${WORKD}/.* ${WORKD}/.*/.* ${WORKD}/.*/.*/.* ${WORKD}/.*/.*/.*/.* "
		fi
	fi


	# Directory walk
	N="0" 
	LEN="0" 
	TLEN="0"
	for i in $STARS $HSTARS
	do	TLEN="${#i}"
		[ -e "$i" ] || continue
		# Save longest line length
		[ "$TLEN" -gt "$LEN" ] && LEN="${TLEN}"
	
		eval ARRAY_"$N"="$i"
		eval OARRAY_"$N"="......"

		N=$(( $N + 1))
	done 

  
	# screen width calculations
	if [ "$LEN" -lt "$ROWS" ]
	then	NUMIT=$(($ROWS / $LEN))
	else	NUMIT="1"
	fi

	# shuffle (disabled)
	cnt="0"
	sft="0"
	sftc="0"
	vary="0"

	while [ "$cnt" -lt "$N" ]
	do	#eval OARRAY_"$sft"="$( eval printf '$'ARRAY_$cnt )"
		eval OARRAY_"$cnt"="$( eval printf '$'ARRAY_$cnt )"
		sft=$(($sft + $NUMIT ))
		sftc=$(($sftc + 1))
		cnt=$(( $cnt + 1 )) 
		if [ $sftc = $((($N / $NUMIT) + 1)) ]
		then	vary=$(( $vary + 1 ))
			sft=$vary
			sftc="0"
		fi
	done

	# print
	C="0"
	while [ "$C" -lt "$N" ]
	do	if [ $LONGLIST -ne "0" ]
		then	shellstat "$( eval printf '$'OARRAY_$C )"
		else	if [ $((($C % $NUMIT))) = "0"  -a "$C" != "0" ]
			then	printf "\n"
			fi 
			printf "%-*s " "$LEN" "$( eval printf '$'OARRAY_$C )"
		fi
		C=$(( $C + 1 )) 
	done
	printf "\n"
}


