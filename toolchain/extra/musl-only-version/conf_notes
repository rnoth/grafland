Usage: /gcc-6.1.0/configure [OPTION(S)] [VAR=VALUE(S)]

This is a modified configure help menu, You should use the original.

To assign environment variables (ie; CC, CFLAGS and etc.), specify them as
VAR=VALUE. Defaults are specified in brackets.  

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR] 

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes] 

  --disable-libquadmath   do not build libquadmath directory
  --disable-libquadmath-support
                          disable libquadmath support for Fortran
  --enable-libada         build libada directory
  --enable-libssp         build libssp directory
  --disable-libstdcxx     do not build libstdc++-v3 directory
  --enable-liboffloadmic=ARG
                          build liboffloadmic [ARG={no,host,target}] 
  --enable-bootstrap      enable bootstrapping [yes if native build] 
  --enable-lto            enable link time optimization support
  --enable-linker-plugin-configure-flags=FLAGS
                          additional flags for configuring linker plugins
                          [none]
  --enable-linker-plugin-flags=FLAGS
                          additional flags for configuring and building linker
                          plugins [none]
  --enable-stage1-languages[=all]
                          choose additional languages to build during stage1.
                          Mostly useful for compiler development 
  --enable-serial-[{host,target,build}-]configure
                          force sequential configuration of sub-packages for
                          the host, target or build machine, or all
                          sub-packages
  --enable-stage1-checking[=all]
                          choose additional checking for stage1 of the
                          compiler
  --enable-werror         enable -Werror in bootstrap stage2 and later
  --enable-host-shared    build host code as shared libraries

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-build-libsubdir=DIR  Directory where to find libraries for build system
  --with-system-zlib      use installed libz 
  --with-stage1-libs=LIBS libraries for stage1
  --with-stage1-ldflags=FLAGS
                          linker flags for stage1
  --with-boot-libs=LIBS   libraries for stage2 and later
  --with-boot-ldflags=FLAGS
                          linker flags for stage2 and later 
  --with-build-sysroot=SYSROOT
                          use sysroot as the system root during the build 

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> 
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> 
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  build_configargs 	additional configure arguments for build directories
  host_configargs 	additional configure arguments for host directories
  target_configargs 	additional configure arguments for target directories

	For host:
  AR      
  AS     
  DLLTOOL  
  LD      
  LIPO   
  NM    
  RANLIB      
  STRIP      
  WINDRES   
  WINDMC    
  OBJCOPY   
  OBJDUMP  
  READELF    
	For target:
  CC_FOR_TARGET 
  CXX_FOR_TARGET 
  GCC_FOR_TARGET 
  GCJ_FOR_TARGET 
  GFORTRAN_FOR_TARGET 
  GOC_FOR_TARGET 
  AR_FOR_TARGET 
  AS_FOR_TARGET 
  DLLTOOL_FOR_TARGET 
  LD_FOR_TARGET 
  LIPO_FOR_TARGET 
  NM_FOR_TARGET 
  OBJCOPY_FOR_TARGET 
  OBJDUMP_FOR_TARGET 
  RANLIB_FOR_TARGET 
  READELF_FOR_TARGET 
  STRIP_FOR_TARGET 
  WINDRES_FOR_TARGET 
  WINDMC_FOR_TARGET 

