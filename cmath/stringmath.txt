
NAME
	add, subtract, multiply - APA arbitrary precision arithmetic

SYNOPSIS
	#include "stringmath.c"
	
	char *add(char *x, char *y, char *result);
	char *subtract(char *x, char *y, char *result);
	char *multiply(const char *x, const char *y, char *result);

DESCRIPTION
	Arbitrary precision mathematics functions. The caller is responsible
	for allocating sufficient memory. This creates some issues which will
	be fixed in a future update.

	APA (aribitrary precision arithmetic) uses arrays of characters to store
	its signed values (internally called a bigstrint). These arrays are 
	identical to C strings except that the first indice stores a sign
	byte (sign bit). Because of this, most operations increment a bigstrint
	before using it so as to operate on the first real value as indice zero.
	Bigsrints are always returned with either a positive or negative sign.
	For example positive "123" would be returned as "+123" and negative 465
	would be returned as -465.
	
	Anatomy of a "bigstrint":

	indice	0    1    2    3    4    5        ...
		[-/+][0-9][0-9][0-9][0-9][\0]
		|			 |
		|--> sign byte           | 
					 |---> nul cap





RETURN VALUE
	All functions return the final result as a pointer to a string 
	(char *).


	





