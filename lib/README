grafland C libraries


LIBRARIES:
----------

	Types of libraries in grafland:

	1) C library helper functions used by various utilities. 
	   These libraries are unique to GrafOS and are not modeled
	   after any specification conformant code.

	2) Utilities and drivers designed to test the C standard library.

	3) Components of the C standard library which have been
	   implmented specifically for GrafOS.

	4) Hexen, a curses / conio replacement library

	5) Line editing and history libraries for shells and irc clients
	   



C STANDARD LIBRARY:
------------------- 

	stdio.h
	
		int ggetchar(void);
		int gputchar(char);
		int ggetc(GFILE *);
		int gputc(int, GFILE *); 
		ssize_t ggetline (char **, size_t *, GFILE *);
		ssize_t ggetdelim(char **, size_t *, char, GFILE *);
		int gprintf(char *, ...);
		int gsprintf(char *, char *, ...);
		int gsnprintf(char *, size_t, char *, ...);
		int gdprintf(int, char *, ...);
		int gfprintf(GFILE *, char *, ...);
		int gvprintf(char *, va_list);
		int gvsprintf(char *, char *, va_list);
		int gvsnprintf(char *, size_t, char *, va_list);
		int gvdprintf(int, char *, va_list);
		int gvfprintf(GFILE *, char *, va_list);
		size_t gfread(void *, size_t, size_t, GFILE *);
		size_t gfwrite(const void *, size_t, size_t, GFILE *);
		int gfeof(GFILE *);
		int gferror(GFILE *);
		int gfileno(GFILE *);
		
		internal:
			int ggetc_inter(GFILE *);
			int gputc_inter(int, GFILE *);
			int gprintf_inter(GFILE *, int, char *, size_t, int, char *, va_list);
		
	stdlib.h
		
		gatoi(char []);
		double gatof(char []);
		void *gmalloc(size_t);
		void gfree(void *);
		void *grealloc(void *, size_t);

		internal:
			Header *morecore(unsigned);

	string.h

		size_t gstrlen(const char *); 
		size_t gstrnlen(const char *, size_t); 
		int gstrcmp(char *, char *);
		char *gstrchr(const char *, int); 
		char *gstrcpy(char *, char *);
		char *gstrncpy(char *, const char *, size_t);
		char *gstrtok(char *, const char *);
		size_t gstrspn(const char *, const char *);
		void* gmemset(void *, int, size_t);
		void* gmemcpy(void*, const void*, size_t) ;
		void *gmemmove(void *, const void *, size_t);
		char *strdup(const char *);
		char *strndup(const char *, size_t);


HEXEN CURSOR LIBRARY:
--------------------

	hexen.h
	
		int fastgetch(void);
		int ansigetch(void);
		int termcatch(int, int);
		void setcursor(size_t, size_t);
		void setcursorchars(size_t, size_t, char);
		void ansihorizon(size_t, size_t);
		int ansiinit(void);
		void addcolor(char *, size_t, size_t);
		void addcolorrange(char *, size_t, size_t, size_t);
		int ansicreate(void);
		int ansidestroy(void);
		int ansiwaddch(int, int);
		int ansiaddmem(char, int, size_t);
		size_t ansiaddstr(char *, size_t);
		int ansiredraw(size_t, size_t, size_t, size_t);

	
	DESCRIPTION

	The ansihexen family of functions are micro sized alternatives to the
	curses API.

	int ansigetch(void);
		ansigetch() is a very heavy getchar-like function which stores,
		changes and then returns the terminal settings to normal. Some
		programmers may choose to use a simple call to read() for this
		purpose instead. Ansigetch() returns immediately upon receiving 
		any character.

		ansigetch() returns -1 upon error. Otherwise it returns the 
		character it read.

	int termcatch(int flags, int reset);
		termcatch() takes a series of bitflag arguments for termios.h.
		The second field can be either a 0 or 1, which saves or restores
		the user's terminal settings.
	
			Example:
				termcatch(~(ICANON | ECHO), 0);
	
		termcatch() returns -1 upon error, 0 upon success.

	void setcursor(size_t x, size_t y) 
		setcursor() sets the cursor to the specified x,y coordinates on
		the terminal.  

			Set the cursor to row 1 column 1: |x    |
							  |     |
    							  |     |    
				setcursor(1. 1);


			Set the cursor to row 2 column 3: |     |
                                                          |  x  |
                                                          |     |
                                setcursor(2. 3);

	int ansiinit(void); 
		ansinit() initializes the ansiglb structure which has the following 
		members:
		struct ansiglb
                	size_t row;     /* global rows    */
                	size_t col;     /* global columns */
                	size_t t;       /* total windows  */
                	size_t c; 	/* current window */
	
	
	The "dothink" global allows ansihexen to know that the screen has changed
	and to allow the redraw logic to pass. Setting it to "1" allows the redraw
	logic to pass over.

	int dothink = 0; /* allow redraw logic to pass during screen changes */ 

	struct ANSIWINDOW
        	size_t len;		/* length of primary buffer 	*/
		size_t counter;		/* A countdown mechanism	*/
        	char *ansiwinbuf;	/* primary buffer 		*/
		char *ansilastmap;	/* last buffer printed 		*/

	ansigetch --	get a char of user input and return it
	termcatch -- 	set the terminal

	RETURN VALUE

	These functions return the character written, or the number of characters
	written upon success, or -1 upon error.

	CONFORMING TO

	The ansihexen() family of function seeks compliance with ANSI terminal
	specifications.
	

		

READLINE LINE EDITING LIBRARY:
------------------------------ 

	readline.h
		
		size_t ircline(char *, char *, size_t);
		void ircprint(char *, size_t, char *, size_t); 
		void determinewin(void); 
		static int readchar(void);
		size_t greadline(char *, char *, size_t);
		size_t greadgetch(char *);
		void greadprint(char *, size_t, char *, size_t);
		int gread_history(char *, size_t); 

	An editline()/readline() like function.

	This function is intended to be used with Gsh, 
	(The Graff Shell). However, it can also be used as a 
	drop in replacement for other line retrieval functions.  

	Up arrow	Scroll history
	Down arrow	Scroll history

	Tab 		Not implemented
	Left arrow	Cursor back one pos
	Right arrow	Cursor forward one pos

	Home		Cursor to start of line



	Other functions:

	ircline.h / ircline()
	
	Ircline() is similiar to readline except that the text remains
	on a single line and scrolls from side to side. 

	This function is not very straight forward to use. If you want
	to use it in an irc client you'll have to hack the function 
	ircgetch apart and use it in an asychronous event loop. An
	example of how to do this can be ound in grafland's irc client. 
	This can be fixed at a later date by adding function pointer 
	entry points to the API (then all other key catches could be 
	added as well).

	The builtin line editing key catches are as follows:
		Left arrow      Cursor back one pos
        	Right arrow     Cursor forward one pos 
       		Home            Cursor to start of line

	Add other key catches as needed.



TEST DRIVERS:
-------------
	
	dirwalk.h
		dirwalk-driver.c
	stdio.h
		dtoa-driver.c
		getchar-driver.c
		getline-driver.c
		itoadriver.c
		stdio-driver.c
	glob.h
		globdriver.c
	ircline.h
		ircline-driver.c
	stdlib.h
		malloc-driver.c
	readline.h
		readline-driver.c


TESTING:
--------

	Test a function by invoking a driver:

		cd grafland/lib/
		make
		./stdio-driver
		./readline-driver

REFERENCES:
-----------


	strtod and printing doubles:

		http://www.exploringbinary.com/how-strtod-works-and-sometimes-doesnt

		https://groups.google.com/forum/m/#!topic/comp.lang.tcl/83RL61OcuWM

		http://krashan.ppa.pl/articles/stringtofloat


CONTACT:
--------

	CM Graff cm0graff@gmail.com







