grafland C libraries


LIBRARIES:
----------

	Types of libraries in grafland:

	1) C library helper functions used by various utilities. 
	   These libraries are unique to GrafOS and are not modeled
	   after any specification conformant code.

	2) Utilities and drivers designed to test the C standard library.

	3) Components of the C standard library which have been
	   implmented specifically for GrafOS.

	4) Hexen, a curses / conio replacement library

	5) Line editing and history libraries for shells and irc clients
	   



C STANDARD LIBRARY:
-------------------

	( an incomplete list )

	stdio.h
	
		int ggetchar(void);
		int gputchar(char);
		int ggetc(GFILE *);
		int gputc(int, GFILE *); 
		ssize_t ggetline (char **, size_t *, GFILE *);
		ssize_t ggetdelim(char **, size_t *, char, GFILE *);
		int gprintf(char *, ...);
		int gsprintf(char *, char *, ...);
		int gsnprintf(char *, size_t, char *, ...);
		int gdprintf(int, char *, ...);
		int gfprintf(GFILE *, char *, ...);
		int gvprintf(char *, va_list);
		int gvsprintf(char *, char *, va_list);
		int gvsnprintf(char *, size_t, char *, va_list);
		int gvdprintf(int, char *, va_list);
		int gvfprintf(GFILE *, char *, va_list);
		size_t gfread(void *, size_t, size_t, GFILE *);
		size_t gfwrite(const void *, size_t, size_t, GFILE *);
		int gfeof(GFILE *);
		int gferror(GFILE *);
		int gfileno(GFILE *);
		
		internal:
			int ggetc_inter(GFILE *);
			int gputc_inter(int, GFILE *);
			int gprintf_inter(GFILE *, int, char *, size_t, int, char *, va_list);
		
	stdlib.h
		
		gatoi(char []);
		double gatof(char []);
		void *gmalloc(size_t);
		void gfree(void *);
		void *grealloc(void *, size_t);

		internal:
			Header *morecore(unsigned);

	string.h

		size_t gstrlen(const char []); 
		int gstrcmp(char *, char *);
		char *gstrchr(const char *, int); 
		char *gstrcpy(char *, char *);
		char *gstrncpy(char *, const char *, size_t);
		char *gstrtok(char *, const char *);
		size_t gstrspn(const char *, const char *);
		void* gmemset(void *, int, size_t);
		void* gmemcpy(void*, const void*, size_t) ;
		void *gmemmove(void *, const void *, size_t);


HEXEN CURSOR LIBRARY:
--------------------

	hexen.h
	
		int fastgetch(void);
		int ansigetch(void);
		int termcatch(int, int);
		void setcursor(size_t, size_t);
		void setcursorchars(size_t, size_t, char);
		void ansihorizon(size_t, size_t);
		int ansiinit(void);
		void addcolor(char *, size_t, size_t);
		void addcolorrange(char *, size_t, size_t, size_t);
		int ansicreate(void);
		int ansidestroy(void);
		int ansiwaddch(int, int);
		int ansiaddmem(char, int, size_t);
		size_t ansiaddstr(char *, size_t);
		int ansiredraw(size_t, size_t, size_t, size_t);

TEST DRIVERS:
-------------
	
	dirwalk.h
		dirwalk-driver.c
	stdio.h
		dtoa-driver.c
		getchar-driver.c
		getline-driver.c
		itoadriver.c
		stdio-driver.c
	glob.h
		globdriver.c
	ircline.h
		ircline-driver.c
	stdlib.h
		malloc-driver.c
	readline.h
		readline-driver.c


TESTING:
--------

	Test a function by invoking a driver:

		cd grafland/lib/
		make
		./stdio-driver
		./readline-driver

REFERENCES:
-----------


	strtod and printing doubles:

		http://www.exploringbinary.com/how-strtod-works-and-sometimes-doesnt/

		https://groups.google.com/forum/m/#!topic/comp.lang.tcl/83RL61OcuWM

		http://krashan.ppa.pl/articles/stringtofloat/


CONTACT:
--------

	CM Graff cm0graff@gmail.com







