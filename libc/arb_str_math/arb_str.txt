
NAME
	APSA (Arbitrary precision string arithmetic)

SYNOPSIS
	#include "arb_str.h"
	
	char *arb_str_add(char *x, char *y, char *result);
	char *arb_str_subtract(char *x, char *y, char *result);
	char *arb_str_multiply(const char *x, const char *y, char *result);
	char *arb_str_divide(char *x, char *y, char *result);


DESCRIPTION
	Arbitrary precision arithmetic functions. The caller is responsible
	for allocating sufficient memory. The global mirrors are "mirror"
	and "tmpmir".
	

		int pad = 10;
		char *answer = malloc((strlen(a) + atrlen(b) + pad )* (sizeof(char));
		mirror = malloc((strlen(a) + atrlen(b) + pad )* (sizeof(char));
		tmpmir = malloc((strlen(a) + atrlen(b) + pad )* (sizeof(char));
		

	APSA (arbitrary precision arithmetic) uses arrays of characters to store
	its signed values (from here on called a bigstrint). These arrays are 
	identical to C strings except that the first indice stores a sign
	byte (sign bit). Because of this, most operations increment a pointer to
	a bigstrint before using it so as to operate on the first real value as
	indice zero.  Bigsrints are always returned with either a positive or 
	negative sign.  For example positive "123" would be returned as "+123" 
	and negative "465" would be returned as "-465".
	
	Anatomy of a "bigstrint":

	indice	0    1    2    3    4    5        ...
		[-/+][0-9][0-9][0-9][0-9][\0]
		|			 |
		|--> sign byte           | 
					 |---> nul cap
			
	Bigstrints are signed integer types. because floating point is not
	fully supported, the division output is is truncated at the end of
	its real part (and discards the incomplete yet accurate fraction it 
	generates). For floating point support see the adjacent library
	../arb_flt_math.
	
	
RETURN VALUE
	All functions return the final result as a pointer to a string 
	(char *).

BUGS:
	Leading zeroes on some division combinations.
	Division requires a leading zero for numbers that start with 9.


